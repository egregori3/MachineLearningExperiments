Loading WIFI dataset
[ 1.  1.  1. ...,  4.  4.  4.]
Tuning hyper-parameters for accuracy

Best parameters set found on development set WIFI

{'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}

8, 0.978, 0.227, 0.002, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
3, 0.979, 0.242, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
8, 0.978, 0.304, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
8, 0.978, 0.252, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
8, 0.978, 0.361, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
3, 0.979, 0.249, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
17, 0.977, 0.268, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
8, 0.978, 0.195, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
8, 0.978, 0.374, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
2, 0.980, 0.227, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
6, 0.979, 0.455, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
3, 0.979, 0.207, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
17, 0.977, 0.330, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
8, 0.978, 0.282, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
8, 0.978, 0.451, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
1, 0.981, 0.244, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
8, 0.978, 0.544, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
6, 0.979, 0.248, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}

Detailed classification report WIFI

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

        1.0       0.99      1.00      0.99       157
        2.0       0.98      0.97      0.98       151
        3.0       0.97      0.97      0.97       153
        4.0       0.99      0.99      0.99       139

avg / total       0.98      0.98      0.98       600


Confusion matrix, without normalization
[[157   0   0   0]
 [  0 147   4   0]
 [  1   5 146   1]
 [  1   0   0 138]]
Loading WIFI dataset
[ 1.  1.  1. ...,  4.  4.  4.]
Tuning hyper-parameters for accuracy

Best parameters set found on development set WIFI2

{'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}

18, 0.974, 0.220, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
6, 0.978, 0.199, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
6, 0.978, 0.291, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
15, 0.976, 0.232, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
2, 0.979, 0.357, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
1, 0.980, 0.208, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
3, 0.979, 0.252, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
3, 0.979, 0.156, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
13, 0.976, 0.336, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
17, 0.975, 0.214, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
6, 0.978, 0.407, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
6, 0.978, 0.174, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
13, 0.976, 0.317, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
15, 0.976, 0.207, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
3, 0.979, 0.435, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
12, 0.977, 0.170, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
6, 0.978, 0.542, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
6, 0.978, 0.178, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}

Detailed classification report WIFI2

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

        1.0       0.99      1.00      0.99       157
        2.0       0.99      0.95      0.97       151
        3.0       0.96      0.97      0.96       153
        4.0       0.99      0.99      0.99       139

avg / total       0.98      0.98      0.98       600


Confusion matrix, without normalization
[[157   0   0   0]
 [  0 145   6   0]
 [  1   1 150   1]
 [  1   0   0 138]]
Loading WIFI dataset
[ 1.  1.  1. ...,  4.  4.  4.]
Tuning hyper-parameters for accuracy

Best parameters set found on development set WIFI3

{'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}

18, 0.974, 0.228, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
3, 0.980, 0.244, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
17, 0.975, 0.300, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
3, 0.980, 0.220, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
9, 0.979, 0.402, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
3, 0.980, 0.225, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
12, 0.978, 0.267, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
1, 0.982, 0.199, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
12, 0.978, 0.345, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
3, 0.980, 0.235, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
15, 0.976, 0.417, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
3, 0.980, 0.201, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
15, 0.976, 0.329, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
3, 0.980, 0.187, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
12, 0.978, 0.437, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
2, 0.981, 0.210, 0.000, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
9, 0.979, 0.566, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
9, 0.979, 0.238, 0.001, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}

Detailed classification report WIFI3

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

        1.0       0.99      1.00      1.00       157
        2.0       0.99      0.96      0.97       151
        3.0       0.96      0.98      0.97       153
        4.0       0.99      0.99      0.99       139

avg / total       0.98      0.98      0.98       600


Confusion matrix, without normalization
[[157   0   0   0]
 [  0 148   3   0]
 [  1   1 150   1]
 [  1   0   0 138]]
Loading LETTER dataset
Integer Encoding dataset
[[ 2  8  3 ...,  8  0  8]
 [ 5 12  3 ...,  8  4 10]
 [ 4 11  6 ...,  7  3  9]
 ..., 
 [ 6  9  6 ..., 12  2  4]
 [ 2  3  4 ...,  9  5  8]
 [ 4  9  6 ...,  7  2  8]]
[19  8  3 ..., 19 18  0]
Tuning hyper-parameters for accuracy

Best parameters set found on development set LETTER

{'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}

18, 0.728, 3.334, 0.005, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
14, 0.771, 2.216, 0.004, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
16, 0.758, 4.355, 0.004, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
13, 0.772, 1.990, 0.004, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
17, 0.756, 5.423, 0.004, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
15, 0.770, 2.125, 0.004, {'activation': 'relu', 'hidden_layer_sizes': 10, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
12, 0.798, 3.779, 0.005, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
4, 0.866, 2.433, 0.005, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
11, 0.804, 5.028, 0.005, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
6, 0.855, 2.560, 0.005, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
10, 0.809, 6.145, 0.005, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
5, 0.866, 2.852, 0.005, {'activation': 'relu', 'hidden_layer_sizes': 25, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}
9, 0.814, 4.495, 0.006, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'sgd'}
2, 0.906, 2.972, 0.006, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 150, 'solver': 'adam'}
8, 0.831, 5.918, 0.007, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'sgd'}
1, 0.910, 2.885, 0.006, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 200, 'solver': 'adam'}
7, 0.843, 7.361, 0.007, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'sgd'}
3, 0.905, 2.946, 0.006, {'activation': 'relu', 'hidden_layer_sizes': 50, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'max_iter': 250, 'solver': 'adam'}

Detailed classification report LETTER

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.96      0.97      0.96       216
          1       0.93      0.89      0.91       239
          2       0.98      0.93      0.95       229
          3       0.94      0.94      0.94       248
          4       0.90      0.92      0.91       221
          5       0.90      0.91      0.91       246
          6       0.87      0.86      0.86       256
          7       0.79      0.89      0.84       202
          8       0.97      0.87      0.92       218
          9       0.94      0.93      0.93       233
         10       0.85      0.93      0.89       207
         11       0.97      0.93      0.95       231
         12       0.96      0.95      0.95       251
         13       0.94      0.98      0.96       223
         14       0.90      0.95      0.92       226
         15       0.95      0.94      0.94       249
         16       0.96      0.87      0.91       215
         17       0.90      0.85      0.87       234
         18       0.88      0.97      0.92       222
         19       0.94      0.93      0.93       237
         20       0.96      0.94      0.95       241
         21       0.88      0.96      0.92       247
         22       0.97      0.95      0.96       215
         23       0.94      0.97      0.96       245
         24       0.97      0.88      0.92       238
         25       0.98      0.94      0.96       211

avg / total       0.93      0.93      0.93      6000


Confusion matrix, without normalization
[[211   0   0   1   0   0   1   0   0   1   0   0   1   0   0   0   0   1
    0   0   0   0   0   0   0   0]
 [  0 221   0   0   1   2   0   3   0   0   1   0   0   1   0   0   0   5
    3   0   0   1   0   0   1   0]
 [  0   0 218   0   0   0   5   0   0   0   0   1   0   0   2   0   1   0
    0   1   0   0   0   1   0   0]
 [  2   2   0 220   0   1   2   5   2   0   0   0   1   5   1   1   2   1
    0   1   0   0   0   2   0   0]
 [  0   1   6   0 192   0   8   1   1   0   1   9   0   0   0   0   2   0
    0   0   0   0   0   0   0   0]
 [  0   2   1   1   1 230   1   0   1   2   0   0   0   1   1   1   0   0
    0   2   0   0   0   0   2   0]
 [  1   1   4   1   1   1 239   0   0   0   0   1   0   0   3   0   1   0
    1   0   0   2   0   0   0   0]
 [  0   2   0   3   0   1   2 174   0   0  10   0   0   2   0   0   2   3
    0   0   2   0   0   1   0   0]
 [  0   0   0   0   0   2   0   0 205   3   0   1   0   0   0   0   0   1
    3   0   0   0   0   2   0   1]
 [  0   0   0   0   0   1   0   0   7 215   0   1   0   1   1   0   1   0
    2   0   0   0   0   3   0   1]
 [  0   0   3   0   1   0   2   4   0   0 188   0   0   0   0   0   0   3
    0   0   2   0   0   4   0   0]
 [  0   0   1   0   0   0   2   1   0   0   1 225   0   0   0   0   1   0
    0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0   1   1   0   1   0   0 234   1   4   0   0   1
    0   0   0   1   7   0   0   0]
 [  0   0   0   1   0   0   0   1   0   0   0   0   3 215   2   0   0   0
    0   0   0   0   1   0   0   0]
 [  1   0   4   2   0   0   4   2   0   0   0   0   0   1 202   0   6   0
    0   1   1   0   1   1   0   0]
 [  0   1   1   0   1  10   2   1   1   0   1   0   1   0   0 226   0   0
    0   0   0   0   0   0   4   0]
 [  0   1   0   1   0   0   5   0   0   0   0   1   0   0   1   0 204   0
    0   0   0   0   0   0   0   2]
 [  0  12   1   1   0   0   1   7   0   1   2   3   0   5   0   0   0 201
    0   0   0   0   0   0   0   0]
 [  0   2   0   0   1   0   0   0   0   0   3   2   0   0   0   0   0   0
  211   0   0   0   0   2   0   1]
 [  0   0   0   2   2   3   4   1   1   0   0   0   0   0   0   1   0   2
    2 204   0   0   0   2  13   0]
 [  0   0   1   1   0   0   0   0   0   0   2   0   1   1   1   1   0   0
    0   0 231   0   2   0   0   0]
 [  0   3   0   0   0   1   0   2   0   0   0   0   0   1   0   1   0   2
    0   1   1 216   3   0  16   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   2   0   1   0   0   0
    0   0   0   0 210   0   2   0]
 [  0   0   0   1   1   3   2   0   1   1   3   0   0   0   1   0   0   1
    1   1   0   0   0 228   1   0]
 [  0   0   1   0   0   0   0   2   0   0   0   2   0   0   0   0   0   0
    2   0   1   0   0   2 228   0]
 [  0   0   0   0   4   0   0   0   0   1   0   0   0   0   0   0   1   0
    0   0   0   0   0   0   0 205]]
